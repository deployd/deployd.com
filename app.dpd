{
	"6278ebfe88dee83f": {
		"path": "/community-posts",
		"order": 1,
		"properties": {
			"author": {
				"required": false,
				"type": "string",
				"typeLabel": "string",
				"id": "author"
			},
			"authorRole": {
				"required": false,
				"type": "string",
				"typeLabel": "string",
				"id": "authorRole"
			},
			"postedTime": {
				"required": false,
				"type": "number",
				"typeLabel": "number",
				"id": "postedTime"
			},
			"message": {
				"required": false,
				"type": "string",
				"typeLabel": "string",
				"id": "message"
			}
		},
		"onGet": "",
		"onPost": "this.postedTime = new Date().getTime();\nprotect('authorRole');\n\nif (me) {\n    this.author = me.name;\n    this.authorRole = me.role;\n}\n\nemit('community:post:create', this);",
		"onPut": "cancel();",
		"onDelete": "cancel();",
		"onValidate": "this.message = (this.message || \"\").trim();\n\nif (!this.message) {\n    error('body', \"Message is required\");\n}\nif (this.message.length > 500) {\n    error('body', \"Message must be less than 500 characters\");\n}\n\nthis.author = (this.author || \"\").trim();\n\nif (!this.author) {\n    error('author', \"Your name is required\");\n}\nif (this.author.length > 20) {\n    error('author', \"Name must be less than 20 characters\");\n}",
		"typeLabel": "Collection",
		"type": "Collection",
		"$renameFrom": "/community-posts"
	},
	"003a4cd56d2dd8ad": {
		"path": "/signups",
		"order": 2,
		"properties": {
			"email": {
				"required": false,
				"type": "string",
				"typeLabel": "string",
				"id": "email"
			},
			"created": {
				"required": false,
				"type": "number",
				"typeLabel": "string",
				"id": "created"
			}
		},
		"onGet": "cancel();",
		"onPost": "/* Authentication */\n// if (!me || !me.isAdmin) {\n//   cancel(\"You must be an admin!\", 401);\n// }\n\n/* Automatic properties */\n// this.creator = me.id;\n// this.creatorName = me.name;\n",
		"onPut": "cancel();",
		"onDelete": "cancel();",
		"onValidate": "// require email\nif(this.email) {\n  var pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n  if(this.email.match(pattern)) {\n    this.created = new Date().getTime();   \n  } else {\n    error('email', 'invalid email');\n  }  \n} else {\n  error('email', 'required');\n}",
		"typeLabel": "Collection",
		"type": "Collection",
		"$renameFrom": "/signups"
	},
	"eb701657c9b74939": {
		"path": "/featured-apps",
		"order": 3,
		"properties": {
			"title": {
				"required": false,
				"type": "string",
				"typeLabel": "string",
				"id": "title"
			},
			"imageUrl": {
				"required": false,
				"type": "string",
				"typeLabel": "string",
				"id": "imageUrl"
			},
			"description": {
				"required": false,
				"type": "string",
				"typeLabel": "string",
				"id": "description"
			},
			"liveLink": {
				"required": false,
				"type": "string",
				"typeLabel": "string",
				"id": "liveLin"
			}
		},
		"onGet": "",
		"onPost": "cancel();",
		"onPut": "cancel();",
		"onDelete": "cancel();",
		"onValidate": "/* Validation */\n// if (this.name.length < 10) {\n//   error(\"name\", \"Must be at least 10 characters\");\n// }\n",
		"typeLabel": "Collection",
		"type": "Collection",
		"$renameFrom": "/featured-apps"
	},
	"14067352165a8802": {
		"path": "/admins",
		"order": 4,
		"properties": {
			"role": {
				"required": false,
				"type": "string",
				"typeLabel": "string",
				"id": "role"
			},
			"name": {
				"required": false,
				"type": "string",
				"typeLabel": "string",
				"id": "name"
			}
		},
		"onGet": "if (!me || me.id !== this.id) {\n    cancel();\n}",
		"onPost": "cancel();",
		"onPut": "cancel();",
		"onDelete": "cancel();",
		"onValidate": "/* Validation */\n// if (this.name.length < 10) {\n//   error(\"name\", \"Must be at least 10 characters\");\n// }\n",
		"typeLabel": "Users Collection",
		"type": "UserCollection",
		"$renameFrom": "/admins"
	},
	"d88047f68fb64bd5": {
		"properties": {
			"title": {
				"required": true,
				"type": "string",
				"typeLabel": "string",
				"id": "title"
			},
			"content": {
				"required": true,
				"type": "string",
				"typeLabel": "string",
				"id": "content"
			},
			"author": {
				"required": true,
				"type": "string",
				"typeLabel": "string",
				"id": "author"
			},
			"created": {
				"required": false,
				"type": "number",
				"typeLabel": "number",
				"id": "created"
			},
			"summary": {
				"required": false,
				"type": "string",
				"typeLabel": "string",
				"id": "summary"
			}
		},
		"onGet": "dpd.blogcomments.get({post: this.id}, function (comments) {\n    if (query.includeComments) this.comments = comments;\n    this.numComments = comments.length || 0;\n});",
		"onPost": "/* Authentication */\n// if (!me || !me.isAdmin) {\n//   cancel(\"You must be an admin!\", 401);\n// }\n\n/* Automatic properties */\n// this.creator = me.id;\n// this.creatorName = me.name;\nthis.created = new Date().getTime();\n\nif (!this.summary) {\n    //Let's create a short version, 200 characters\n    this.summary = this.content.replace(/<(?:.|\\n)*?>/gm, '');\n    //Get through the end of the sentence\n    var postSummary = this.summary.slice(200, -1);\n    var endPoint = postSummary.indexOf('.');\n    \n    this.summary = this.summary.slice(0,endPoint)   \n}",
		"onPut": "/* Readonly properties */\n// protect(\"creator\");\n",
		"onDelete": "",
		"onValidate": "/* Validation */\n// if (this.name.length < 10) {\n//   error(\"name\", \"Must be at least 10 characters\");\n// }\n",
		"path": "/blog-posts",
		"order": 5,
		"typeLabel": "Collection",
		"type": "Collection",
		"$renameFrom": "/blog-posts"
	},
	"1b3c4ba4512359a7": {
		"properties": {
			"created": {
				"required": false,
				"type": "number",
				"typeLabel": "number",
				"id": "created"
			},
			"commentText": {
				"required": false,
				"type": "string",
				"typeLabel": "string",
				"id": "commentText"
			},
			"commentor": {
				"required": false,
				"type": "string",
				"typeLabel": "string",
				"id": "commentor"
			},
			"post": {
				"required": false,
				"type": "string",
				"typeLabel": "string",
				"id": "post"
			}
		},
		"onGet": "",
		"onPost": "/* Authentication */\n// if (!me || !me.isAdmin) {\n//   cancel(\"You must be an admin!\", 401);\n// }\n\n/* Automatic properties */\n// this.creator = me.id;\n// this.creatorName = me.name;\nthis.created = new Date().getTime();\n\nemit(\"newComment\", this);",
		"onPut": "/* Readonly properties */\n// protect(\"creator\");\n",
		"onDelete": "",
		"onValidate": "/* Validation */\n// if (this.name.length < 10) {\n//   error(\"name\", \"Must be at least 10 characters\");\n// }\n\nif (!this.post) {\n    error(\"post\", \"Comment must be attached to a post\");\n}\nif (!this.commentor) {\n    error(\"commentor\", \"A commentor must be provided\");\n}\nif (!this.commentText) {\n    error(\"commentText\", \"A comment must be provided\");\n}",
		"path": "/blog-comments",
		"order": 6,
		"typeLabel": "Collection",
		"type": "Collection"
	}
}